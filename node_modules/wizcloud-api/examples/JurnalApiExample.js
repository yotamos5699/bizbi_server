////////////////////////////////////////////////////////////basic required code 
//Must to configure private data on apiConfig.js file
const wizlib = require("wizcloud-api");
//var express = require("express");
//var router = express.Router();
var fs   = require('fs');
var myObjData;
			try{
				myObjData=JSON.parse(fs.readFileSync('apiConfig.js'));
			}catch(e){ //no config file take from fs
				console.log(e);				
      } 
var myDBname=myObjData.WizcloudApiDBName;
wizlib.init(myObjData.WizcloudApiPrivateKey, myObjData.WizcloudApiServer);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Jason data example- client responsibility
let trans = [
	{
		TransDebID: "111",
		TransCredID2: "222",
		DebName: "111 name",
		CredName: "222 name",
		ValueDate: "30/01/2018",
		DueDate: "30/01/2018",
		suF: 120,
		suFDlr: "20.00",
		moves: [
			{
				AccountKey: "111",
				DebitCredit: "1", 
				SuF: 120,
				SuFDlr: "20" 
			},
			{
				AccountKey: "222",
				DebitCredit: "0", 
				SuF: 120,
				SuFDlr: "20"
			}
		]
	},
	{
		TransDebID: "777",
		TransCredID: "40001",
		Referance: "110",
		TransType: "חל",
		CurrencyCode: "$",
		ValueDate: "30/01/2019",
		suF: 117,
		suFDlr: "33",
		moves: [
			{
				AccountKey: "777",
				DebitCredit: "1", 
				SuF: 117,
				SuFDlr: "33" 
			},
			{
				AccountKey: "40001",
				DebitCredit: "0", 
				SuF: 100,
				SuFDlr: "25" 
			},
			{
				AccountKey: "60001",
				DebitCredit: "0", 
				SuF: 17,
				SuFDlr: "8" 
			}
		]
	}
]

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Api methods

async function tmpJurnalBatch(){
	let apiRes = await wizlib.tmpJurnalBatch(myDBname, { insertolastb: true ,batchNo: 555, check: true, issue: false, rows: trans });
	console.log(apiRes);
	fs.writeFile('myApiRes.txt', JSON.stringify(apiRes), (err) => {
    if (err) throw err;
		console.log('See resaults in myApiRes.txt');
	});
}

tmpJurnalBatch();

async function chkJurnalBatch(){
	let apiRes = await wizlib.chkJurnalBatch(myDBname, { batchNo: 777});
	console.log(apiRes)
}
async function newJurnalBatch(){
	let apiRes = await wizlib.newJurnalBatch(myDBname);
	console.log(apiRes)
}
async function issueJurnalBatch(){
	let apiRes = await wizlib.issueJurnalBatch(myDBname, { batchNo: 295 });
	console.log(apiRes)
}


/*
router.get("/", async function(req, res) {
	let apiRes = await wizlib.tmpJurnalBatch(myDBname, { insertolastb: true ,batchNo: 555, check: false, issue: false, rows: trans });
	res.json(apiRes);
});

router.get("/cb", async function(req, res) {
	let apiRes = await wizlib.chkJurnalBatch(myDBname, { batchNo: 777});
	res.json(apiRes);
});

router.get("/nb", async function(req, res) {
	let apiRes = await wizlib.newJurnalBatch(myDBname);
	res.json(apiRes);
});
router.get("/ib", async function(req, res) {
	let apiRes = await wizlib.issueJurnalBatch(myDBname, { batchNo: 295 });
	res.json(apiRes);
});


module.exports = router;
*/